<?php

namespace App\Http\Controllers;

use App\Favorites;
use App\Repositories\AppRepositoryImpl;
use Illuminate\Http\Request;

class FavoriteController extends Controller
{
    public function __construct(AppRepositoryImpl $appRepository)
{
    $this->appRepository = $appRepository;
    $this->model = new Favorites();
}

    public function index($contact_id){
        return Favorites::where('contact_id',$contact_id)->paginate();
    }
    public function show($contact_id,$id){

        return $this->response(Favorites::where('contact_id',$contact_id)->where('id',$id)->first());
    }
    public function update($contact_id,$id){
        \request()->validate($this->validationRules(),$this->validationMessages(),$this->validationAttributes());
        $favorite = Favorites::where('contact_id',$contact_id)->where('id',$id)->first();
        if (!$favorite)
            return abort(404);
        $favorite->fill(\request()->all());
        $favorite->updated_by = auth()->id();
        $favorite->save();
        return $this->response($favorite);
    }
    public function store($contact_id){
        \request()->validate($this->validationRules(),$this->validationMessages(),$this->validationAttributes());
        \request()->request->add(['contact_id'=>$contact_id]);
        $favorite = new Favorites();
        $favorite->fill(\request()->all());
        $favorite->created_by = auth()->id();
        $favorite->save();
        return $this->response($favorite);    }
    public function destroy($contact_id,$id){
        $res =Favorites::where('contact_id',$contact_id)->where('id',$id)->delete();
        if (!$res)
            return abort(404);
        return $this->response($res);
    }
    protected function validationRules(){
        return [
            'contact_id'=>[],
            'title'=>['required'],
            'description'=>[],
            'number'=>['required'],
            'percent'=>[],
            'type'=>[],
            'state'=>[],
        ];
    }
    protected function validationAttributes(){
        return []; // TODO: Change the autogenerated stub
    }
    protected function validationMessages(){
        return []; // TODO: Change the autogenerated stub
    }
}
